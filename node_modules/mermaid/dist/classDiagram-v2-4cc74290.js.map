{"version":3,"file":"classDiagram-v2-4cc74290.js","sources":["../src/diagrams/class/classRenderer-v2.js","../src/diagrams/class/classDiagram-v2.ts"],"sourcesContent":["import { select } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { curveLinear } from 'd3';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\n\nconst sanitizeText = (txt) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param {Object<\n *   string,\n *   { cssClasses: string[]; text: string; id: string; type: string; domId: string }\n * >} classes\n *   Object containing the vertices.\n * @param {SVGGElement} g The graph that is to be drawn.\n * @param _id\n * @param diagObj\n */\nexport const addClasses = function (classes, g, _id, diagObj) {\n  // const svg = select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n    // if (vertex.classes.length > 0) {\n    //   classStr = vertex.classes.join(' ');\n    // }\n\n    const styles = { labelStyle: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    // let vertexNode;\n    // if (evaluate(getConfig().flowchart.htmlLabels)) {\n    //   const node = {\n    //     label: vertexText.replace(\n    // eslint-disable-next-line @cspell/spellchecker\n    //       /fa[lrsb]?:fa-[\\w-]+/g,\n    //       s => `<i class='${s.replace(':', ' ')}'></i>`\n    //     )\n    //   };\n    //   vertexNode = addHtmlLabel(svg, node).node();\n    //   vertexNode.parentNode.removeChild(vertexNode);\n    // } else {\n    //   const svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    //   svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n    //   const rows = vertexText.split(common.lineBreakRegex);\n\n    //   for (let j = 0; j < rows.length; j++) {\n    //     const tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n    //     tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n    //     tspan.setAttribute('dy', '1em');\n    //     tspan.setAttribute('x', '1');\n    //     tspan.textContent = rows[j];\n    //     svgLabel.appendChild(tspan);\n    //   }\n    //   vertexNode = svgLabel;\n    // }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'class':\n        _shape = 'class_box';\n        break;\n      default:\n        _shape = 'class_box';\n    }\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radious,\n      ry: radious,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      padding: getConfig().flowchart.padding,\n    });\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param {{text: string; class: string; placement: number}[]} notes\n *   Object containing the additional vertices (notes).\n * @param {SVGGElement} g The graph that is to be drawn.\n * @param {number} startEdgeId starting index for note edge\n * @param classes\n */\nexport const addNotes = function (notes, g, startEdgeId, classes) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text;\n\n    let radious = 0;\n    let _shape = 'note';\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radious,\n      ry: radious,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      style: styles.style,\n      id: vertex.id,\n      type: 'note',\n      padding: getConfig().flowchart.padding,\n    });\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n    const edgeData = {};\n    //Set relationship style and line type\n    edgeData.classes = 'relation';\n    edgeData.pattern = 'dotted';\n\n    edgeData.id = `edgeNote${edgeId}`;\n    // Set link type for rendering\n    edgeData.arrowhead = 'none';\n\n    log.info(`Note edge: ${JSON.stringify(edgeData)}, ${JSON.stringify(vertex)}`);\n    //Set edge extra labels\n    edgeData.startLabelRight = '';\n    edgeData.endLabelLeft = '';\n\n    //Set relation arrow types\n    edgeData.arrowTypeStart = 'none';\n    edgeData.arrowTypeEnd = 'none';\n    let style = 'fill:none';\n    let labelStyle = '';\n\n    edgeData.style = style;\n    edgeData.labelStyle = labelStyle;\n\n    edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations\n * @param {object} g The graph object\n */\nexport const addRelations = function (relations, g) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  // if (typeof relations.defaultStyle !== 'undefined') {\n  //   const defaultStyles = getStylesFromArray(relations.defaultStyle);\n  //   defaultStyle = defaultStyles.style;\n  //   defaultLabelStyle = defaultStyles.labelStyle;\n  // }\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData = {};\n    //Set relationship style and line type\n    edgeData.classes = 'relation';\n    edgeData.pattern = edge.relation.lineType == 1 ? 'dashed' : 'solid';\n\n    edgeData.id = 'id' + cnt;\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    log.info(edgeData, edge);\n    //Set edge extra labels\n    //edgeData.startLabelLeft = edge.relationTitle1;\n    edgeData.startLabelRight = edge.relationTitle1 === 'none' ? '' : edge.relationTitle1;\n    edgeData.endLabelLeft = edge.relationTitle2 === 'none' ? '' : edge.relationTitle2;\n    //edgeData.endLabelRight = edge.relationTitle2;\n\n    //Set relation arrow types\n    edgeData.arrowTypeStart = getArrowMarker(edge.relation.type1);\n    edgeData.arrowTypeEnd = getArrowMarker(edge.relation.type2);\n    let style = '';\n    let labelStyle = '';\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    } else {\n      style = 'fill:none';\n      if (defaultStyle !== undefined) {\n        style = defaultStyle;\n      }\n      if (defaultLabelStyle !== undefined) {\n        labelStyle = defaultLabelStyle;\n      }\n    }\n\n    edgeData.style = style;\n    edgeData.labelStyle = labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (relations.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(relations.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      if (getConfig().flowchart.htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param {object} cnf Config to merge\n */\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n\n  keys.forEach(function (key) {\n    conf[key] = cnf[key];\n  });\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {string} text\n * @param {string} id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing class - ', id);\n\n  const conf = getConfig().flowchart;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes = diagObj.db.getClasses();\n  const relations = diagObj.db.getRelations();\n  const notes = diagObj.db.getNotes();\n\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Add custom shapes\n  // flowChartShapes.addToRenderV2(addShape);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf.titleTopMargin, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n      // rect.setAttribute('style', 'fill:#e8e8e8;');\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n\n  // If node has a link, wrap it in an anchor SVG object.\n  // const keys = Object.keys(classes);\n  // keys.forEach(function(key) {\n  //   const vertex = classes[key];\n\n  //   if (vertex.link) {\n  //     const node = select('#' + id + ' [id=\"' + key + '\"]');\n  //     if (node) {\n  //       const link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n  //       link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n  //       link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n  //       link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n\n  //       const linkNode = node.insert(function() {\n  //         return link;\n  //       }, ':first-child');\n\n  //       const shape = node.select('.label-container');\n  //       if (shape) {\n  //         linkNode.append(function() {\n  //           return shape.node();\n  //         });\n  //       }\n\n  //       const label = node.select('.label');\n  //       if (label) {\n  //         linkNode.append(function() {\n  //           return label.node();\n  //         });\n  //       }\n  //     }\n  //   }\n  // });\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param {number} type The type to look for\n * @returns {'aggregation' | 'extension' | 'composition' | 'dependency'} The arrow marker\n */\nfunction getArrowMarker(type) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["styles","conf"],"mappings":"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"}